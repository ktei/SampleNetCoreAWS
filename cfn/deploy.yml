AWSTemplateFormatVersion: '2010-09-09'

Description: ECS Service - sample-netcore

Parameters:
  ApplicationName:
    Type: String
    Description: The name of the application we're trying to deploy, which will be
      used for service name and container name etc.
    Default: sample-netcore

  EnvironmentName:
    Type: String
    Description: The runtime environment name for this application, e.g. ASPNETCORE_ENVIRONMENT
      for Dotnet Core, NODE_ENV for Node
    Default: Development

  BaseImageName:
    Type: String
    Description: The docker image name

  EnableHttps:
    Type: String
    Description: Set this to true if you want to encrpyted traffic between ALB and ECS
    Default: false

  ClusterName:
    Type: String
    Description: The name of the ECS cluster where this service is about to be deployed
    Default: ApplicationCluster

  DesiredCount:
    Type: Number
    Description: How many instance of this task should we run across our cluster?
    Default: 1

  Priority:
    Description: Priority to evaluate Path rules
    Type: Number
    MaxValue: 50000
    MinValue: 1
    Default: 1

  ImageTag:
    Type: String
    Description: The docker image tag

  HealthCheckPath:
    Type: String
    Description: Every container must provide a health url for the load balancer to
      test with
    Default: /app/healthcheck

  DeregistrationDelay:
    Type: Number
    Description: The duration (in seconds) ECS waits for before degistrating a container
    Default: 5

  Memory:
    Type: Number
    Description: 'Soft memory limit of this task: the service cannot use memory above
      this number'
    Default: 256

  Path:
    Type: String
    Description: The path to register with the ALB
    Default: /app*

  ContainerPort:
    Type: Number
    Description: The port the load balancer will map traffic to on the container;
      this application should listen to this port as well
    Default: 5000

Conditions:
  httpsEnabled: !Equals
    - !Ref 'EnableHttps'
    - true

Resources:
  Service:
    Type: AWS::ECS::Service
    Properties:
      LoadBalancers: 
          - ContainerName: !Ref 'ApplicationName'
            TargetGroupArn: !Ref 'TargetGroup'
            ContainerPort: !Ref 'ContainerPort'
      Cluster: !Ref 'ClusterName'
      Role: !Ref 'ServiceRole'
      TaskDefinition: !Ref 'TaskDefinition'
      DesiredCount: !Ref 'DesiredCount'
    DependsOn: ListenerRule

  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      Policies:
        - PolicyName: ECSService
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - ec2:AuthorizeSecurityGroupIngress
                  - ec2:Describe*
                  - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
                  - elasticloadbalancing:Describe*
                  - elasticloadbalancing:RegisterInstancesWithLoadBalancer
                  - elasticloadbalancing:DeregisterTargets
                  - elasticloadbalancing:DescribeTargetGroups
                  - elasticloadbalancing:DescribeTargetHealth
                  - elasticloadbalancing:RegisterTargets
                Resource: '*'
                Effect: Allow
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs.amazonaws.com

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      TaskRoleArn: !GetAtt 'TaskRole.Arn'
      ContainerDefinitions:
        - Environment:
            - Name: ASPNETCORE_ENVIRONMENT
              Value: !Ref 'EnvironmentName'
            - Name: NODE_ENV
              Value: !Ref 'EnvironmentName'
            - Name: PORT
              Value: !Ref 'ContainerPort'
          Name: !Ref 'ApplicationName'
          Image: !Sub '${BaseImageName}:${ImageTag}'
          PortMappings:
            - ContainerPort: !Ref 'ContainerPort'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'AWS::StackName'
              awslogs-region: !Ref 'AWS::Region'
          Memory: !Ref 'Memory'
          Essential: true
    DependsOn: CloudWatchLogsGroup

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 60
      LogGroupName: !Ref 'AWS::StackName'

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthyThresholdCount: 2
      HealthCheckIntervalSeconds: 10
      VpcId: !ImportValue 'infra-vpc::VpcId'
      Protocol: !If
        - httpsEnabled
        - HTTPS
        - HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckPath: !Ref 'HealthCheckPath'
      HealthCheckTimeoutSeconds: 5
      TargetGroupAttributes:
        - Value: !Ref 'DeregistrationDelay'
          Key: deregistration_delay.timeout_seconds
      HealthCheckProtocol: HTTP
      Port: !If
        - httpsEnabled
        - 443
        - 80

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Priority: !Ref 'Priority'
      Conditions:
        - Field: path-pattern
          Values:
            - !Ref 'Path'
      Actions:
        - TargetGroupArn: !Ref 'TargetGroup'
          Type: forward
      ListenerArn: !ImportValue infra-alb::LoadBalancerListenerArn
